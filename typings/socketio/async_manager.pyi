"""
This type stub file was generated by pyright.
"""

from .base_manager import BaseManager

class AsyncManager(BaseManager):
    """Manage a client list for an asyncio server."""
    async def can_disconnect(self, sid, namespace):  # -> bool:
        ...
    async def emit(
        self,
        event,
        data,
        namespace,
        room=...,
        skip_sid=...,
        callback=...,
        to=...,
        **kwargs,
    ):  # -> None:
        """Emit a message to a single client, a room, or all the clients
        connected to the namespace.

        Note: this method is a coroutine.
        """
        ...

    async def connect(self, eio_sid, namespace):  # -> None:
        """Register a client connection to a namespace.

        Note: this method is a coroutine.
        """
        ...

    async def disconnect(self, sid, namespace, **kwargs):  # -> None:
        """Disconnect a client.

        Note: this method is a coroutine.
        """
        ...

    async def enter_room(self, sid, namespace, room, eio_sid=...):  # -> None:
        """Add a client to a room.

        Note: this method is a coroutine.
        """
        ...

    async def leave_room(self, sid, namespace, room):  # -> None:
        """Remove a client from a room.

        Note: this method is a coroutine.
        """
        ...

    async def close_room(self, room, namespace):  # -> None:
        """Remove all participants from a room.

        Note: this method is a coroutine.
        """
        ...

    async def trigger_callback(self, sid, id, data):  # -> None:
        """Invoke an application callback.

        Note: this method is a coroutine.
        """
        ...
