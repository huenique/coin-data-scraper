"""
This type stub file was generated by pyright.
"""

default_logger = ...
class BaseManager:
    def __init__(self) -> None:
        ...
    
    def set_server(self, server): # -> None:
        ...
    
    def initialize(self): # -> None:
        """Invoked before the first request is received. Subclasses can add
        their initialization code here.
        """
        ...
    
    def get_namespaces(self): # -> dict_keys[Any, Any]:
        """Return an iterable with the active namespace names."""
        ...
    
    def get_participants(self, namespace, room): # -> Generator[tuple[Any, Any] | Any, Any, None]:
        """Return an iterable with the active participants in a room."""
        ...
    
    def connect(self, eio_sid, namespace): # -> None:
        """Register a client connection to a namespace."""
        ...
    
    def is_connected(self, sid, namespace): # -> bool:
        ...
    
    def sid_from_eio_sid(self, eio_sid, namespace): # -> None:
        ...
    
    def eio_sid_from_sid(self, sid, namespace): # -> None:
        ...
    
    def pre_disconnect(self, sid, namespace):
        """Put the client in the to-be-disconnected list.

        This allows the client data structures to be present while the
        disconnect handler is invoked, but still recognize the fact that the
        client is soon going away.
        """
        ...
    
    def basic_disconnect(self, sid, namespace, **kwargs): # -> None:
        ...
    
    def basic_enter_room(self, sid, namespace, room, eio_sid=...): # -> None:
        ...
    
    def basic_leave_room(self, sid, namespace, room): # -> None:
        ...
    
    def basic_close_room(self, room, namespace): # -> None:
        ...
    
    def get_rooms(self, sid, namespace): # -> list[Any]:
        """Return the rooms a client is in."""
        ...
    


