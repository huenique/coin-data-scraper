"""
This type stub file was generated by pyright.
"""

from .async_manager import AsyncManager

class AsyncPubSubManager(AsyncManager):
    """Manage a client list attached to a pub/sub backend under asyncio.

    This is a base class that enables multiple servers to share the list of
    clients, with the servers communicating events through a pub/sub backend.
    The use of a pub/sub backend also allows any client connected to the
    backend to emit events addressed to Socket.IO clients.

    The actual backends must be implemented by subclasses, this class only
    provides a pub/sub generic framework for asyncio applications.

    :param channel: The channel name on which the server sends and receives
                    notifications.
    """
    name = ...
    def __init__(self, channel=..., write_only=..., logger=...) -> None:
        ...
    
    def initialize(self): # -> None:
        ...
    
    async def emit(self, event, data, namespace=..., room=..., skip_sid=..., callback=..., to=..., **kwargs): # -> None:
        """Emit a message to a single client, a room, or all the clients
        connected to the namespace.

        This method takes care or propagating the message to all the servers
        that are connected through the message queue.

        The parameters are the same as in :meth:`.Server.emit`.

        Note: this method is a coroutine.
        """
        ...
    
    async def can_disconnect(self, sid, namespace): # -> bool | None:
        ...
    
    async def disconnect(self, sid, namespace, **kwargs): # -> None:
        ...
    
    async def enter_room(self, sid, namespace, room, eio_sid=...): # -> None:
        ...
    
    async def leave_room(self, sid, namespace, room): # -> None:
        ...
    
    async def close_room(self, room, namespace=...): # -> None:
        ...
    


